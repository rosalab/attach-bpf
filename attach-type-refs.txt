drivers/net/netkit.c:519:			       attr->attach_type);
drivers/net/netkit.c:559:			       attr->attach_type);
drivers/net/netkit.c:591:			       attr->query.attach_type);
drivers/net/netkit.c:717:	seq_printf(seq, "attach_type:\t%u (%s)\n",
drivers/net/netkit.c:734:	info->netkit.attach_type = nkl->location;
drivers/net/netkit.c:761:	nkl->location = attr->link_create.attach_type;
drivers/net/netkit.c:776:			       attr->link_create.attach_type);
include/linux/bpf-cgroup.h:38:static inline enum cgroup_bpf_attach_type
include/linux/bpf-cgroup.h:39:to_cgroup_bpf_attach_type(enum bpf_attach_type attach_type)
include/linux/bpf-cgroup.h:41:	switch (attach_type) {
include/linux/bpf-cgroup.h:71:		return CGROUP_BPF_ATTACH_TYPE_INVALID;
include/linux/bpf-cgroup.h:77:extern struct static_key_false cgroup_bpf_enabled_key[MAX_CGROUP_BPF_ATTACH_TYPE];
include/linux/bpf-cgroup.h:106:	enum bpf_attach_type type;
include/linux/bpf-cgroup.h:121:				enum cgroup_bpf_attach_type atype);
include/linux/bpf-cgroup.h:124:			       enum cgroup_bpf_attach_type atype);
include/linux/bpf-cgroup.h:129:				      enum cgroup_bpf_attach_type atype,
include/linux/bpf-cgroup.h:135:				     enum cgroup_bpf_attach_type atype);
include/linux/bpf-cgroup.h:138:				      short access, enum cgroup_bpf_attach_type atype);
include/linux/bpf-cgroup.h:143:				   enum cgroup_bpf_attach_type atype);
include/linux/bpf-cgroup.h:175:			     enum bpf_attach_type type);
include/linux/bpf-cgroup.h:185:					   enum cgroup_bpf_attach_type type)
include/linux/bpf.h:1516:	enum bpf_attach_type saved_dst_attach_type;
include/linux/bpf.h:1557:	int cgroup_atype; /* enum cgroup_bpf_attach_type */
include/linux/bpf.h:1612:				enforce_expected_attach_type:1, /* Enforce expected_attach_type checking at attach time */
include/linux/bpf.h:1618:	enum bpf_attach_type	expected_attach_type; /* For some prog types */
include/linux/bpf.h:1700:	enum bpf_attach_type attach_type;
include/linux/bpf.h:2439:			       enum bpf_attach_type attach_type);
include/linux/bpf-cgroup-defs.h:20:enum cgroup_bpf_attach_type {
include/linux/bpf-cgroup-defs.h:21:	CGROUP_BPF_ATTACH_TYPE_INVALID = -1,
include/linux/bpf-cgroup-defs.h:52:	MAX_CGROUP_BPF_ATTACH_TYPE
include/linux/bpf-cgroup-defs.h:57:	struct bpf_prog_array __rcu *effective[MAX_CGROUP_BPF_ATTACH_TYPE];
include/linux/bpf-cgroup-defs.h:64:	struct hlist_head progs[MAX_CGROUP_BPF_ATTACH_TYPE];
include/linux/bpf-cgroup-defs.h:65:	u8 flags[MAX_CGROUP_BPF_ATTACH_TYPE];
include/linux/bpf-netns.h:9:static inline enum netns_bpf_attach_type
include/linux/bpf-netns.h:10:to_netns_bpf_attach_type(enum bpf_attach_type attach_type)
include/linux/bpf-netns.h:12:	switch (attach_type) {
include/linux/bpf_verifier.h:884:		return prog->expected_attach_type != BPF_TRACE_ITER;
include/net/netns/bpf.h:14:enum netns_bpf_attach_type {
include/net/netns/bpf.h:18:	MAX_NETNS_BPF_ATTACH_TYPE
include/net/netns/bpf.h:23:	struct bpf_prog_array __rcu *run_array[MAX_NETNS_BPF_ATTACH_TYPE];
include/net/netns/bpf.h:24:	struct bpf_prog *progs[MAX_NETNS_BPF_ATTACH_TYPE];
include/net/netns/bpf.h:25:	struct list_head links[MAX_NETNS_BPF_ATTACH_TYPE];
include/uapi/linux/bpf.h:110:	__u32	attach_type;		/* program attach type (enum bpf_attach_type) */
include/uapi/linux/bpf.h:1061:enum bpf_attach_type {
kernel/bpf/net_namespace.c:15:	enum netns_bpf_attach_type netns_type;
kernel/bpf/net_namespace.c:29:static void netns_bpf_attach_type_unneed(enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:42:static void netns_bpf_attach_type_need(enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:57:				       enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:66:static int link_index(struct net *net, enum netns_bpf_attach_type type,
kernel/bpf/net_namespace.c:80:static int link_count(struct net *net, enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:90:static void fill_prog_array(struct net *net, enum netns_bpf_attach_type type,
kernel/bpf/net_namespace.c:106:	enum netns_bpf_attach_type type = net_link->netns_type;
kernel/bpf/net_namespace.c:122:	netns_bpf_attach_type_unneed(type);
kernel/bpf/net_namespace.c:170:	enum netns_bpf_attach_type type = net_link->netns_type;
kernel/bpf/net_namespace.c:219:	info->netns.attach_type = net_link->type;
kernel/bpf/net_namespace.c:231:		   "attach_type:\t%u\n",
kernel/bpf/net_namespace.c:233:		   info.netns.attach_type);
kernel/bpf/net_namespace.c:249:				  enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:274:	enum netns_bpf_attach_type type;
kernel/bpf/net_namespace.c:281:	type = to_netns_bpf_attach_type(attr->query.attach_type);
kernel/bpf/net_namespace.c:300:	enum netns_bpf_attach_type type;
kernel/bpf/net_namespace.c:308:	type = to_netns_bpf_attach_type(attr->attach_type);
kernel/bpf/net_namespace.c:365:				   enum netns_bpf_attach_type type,
kernel/bpf/net_namespace.c:385:	enum netns_bpf_attach_type type;
kernel/bpf/net_namespace.c:392:	type = to_netns_bpf_attach_type(attr->attach_type);
kernel/bpf/net_namespace.c:409:static int netns_bpf_max_progs(enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:422:				 enum netns_bpf_attach_type type)
kernel/bpf/net_namespace.c:470:	netns_bpf_attach_type_need(type);
kernel/bpf/net_namespace.c:479:	enum netns_bpf_attach_type netns_type;
kernel/bpf/net_namespace.c:482:	enum bpf_attach_type type;
kernel/bpf/net_namespace.c:489:	type = attr->link_create.attach_type;
kernel/bpf/net_namespace.c:490:	netns_type = to_netns_bpf_attach_type(type);
kernel/bpf/net_namespace.c:533:	for (type = 0; type < MAX_NETNS_BPF_ATTACH_TYPE; type++)
kernel/bpf/net_namespace.c:541:	enum netns_bpf_attach_type type;
kernel/bpf/net_namespace.c:545:	for (type = 0; type < MAX_NETNS_BPF_ATTACH_TYPE; type++) {
kernel/bpf/net_namespace.c:549:			netns_bpf_attach_type_unneed(type);
kernel/bpf/tcx.c:12:	bool created, ingress = attr->attach_type == BPF_TCX_INGRESS;
kernel/bpf/tcx.c:61:	bool ingress = attr->attach_type == BPF_TCX_INGRESS;
kernel/bpf/tcx.c:124:	bool ingress = attr->query.attach_type == BPF_TCX_INGRESS;
kernel/bpf/tcx.c:262:	seq_printf(seq, "attach_type:\t%u (%s)\n",
kernel/bpf/tcx.c:279:	info->tcx.attach_type = tcx->location;
kernel/bpf/tcx.c:305:	tcx->location = attr->link_create.attach_type;
kernel/bpf/bpf_iter.c:423:	    link->prog->expected_attach_type != new_prog->expected_attach_type ||
kernel/bpf/bpf_lsm.c:227:	if (prog->expected_attach_type == BPF_LSM_CGROUP) {
kernel/bpf/bpf_lsm.c:258:		if (prog->expected_attach_type != BPF_LSM_CGROUP)
kernel/bpf/bpf_lsm.c:268:		if (prog->expected_attach_type != BPF_LSM_CGROUP)
kernel/bpf/bpf_struct_ops.c:755:		    prog->expected_attach_type != i) {
kernel/bpf/btf.c:6006:				      enum bpf_attach_type attach_type)
kernel/bpf/btf.c:6067:		switch (attach_type) {
kernel/bpf/btf.c:6408:	enum bpf_attach_type atype = prog->expected_attach_type;
kernel/bpf/btf.c:6576:		switch (prog->expected_attach_type) {
kernel/bpf/btf.c:6696:	if (prog->expected_attach_type == BPF_TRACE_RAW_TP) {
kernel/bpf/btf.c:7656:						       prog->expected_attach_type))
kernel/bpf/cgroup.c:24:DEFINE_STATIC_KEY_ARRAY_FALSE(cgroup_bpf_enabled_key, MAX_CGROUP_BPF_ATTACH_TYPE);
kernel/bpf/cgroup.c:49:		      enum cgroup_bpf_attach_type atype,
kernel/bpf/cgroup.c:154:static enum cgroup_bpf_attach_type
kernel/bpf/cgroup.c:155:bpf_cgroup_atype_find(enum bpf_attach_type attach_type, u32 attach_btf_id)
kernel/bpf/cgroup.c:161:	if (attach_type != BPF_LSM_CGROUP)
kernel/bpf/cgroup.c:162:		return to_cgroup_bpf_attach_type(attach_type);
kernel/bpf/cgroup.c:200:static enum cgroup_bpf_attach_type
kernel/bpf/cgroup.c:201:bpf_cgroup_atype_find(enum bpf_attach_type attach_type, u32 attach_btf_id)
kernel/bpf/cgroup.c:203:	if (attach_type != BPF_LSM_CGROUP)
kernel/bpf/cgroup.c:204:		return to_cgroup_bpf_attach_type(attach_type);
kernel/bpf/cgroup.c:225:				     enum bpf_attach_type type,
kernel/bpf/cgroup.c:234:	key.attach_type = type;
kernel/bpf/cgroup.c:268:				     enum bpf_attach_type attach_type)
kernel/bpf/cgroup.c:273:		bpf_cgroup_storage_link(storages[stype], cgrp, attach_type);
kernel/bpf/cgroup.c:312:				if (pl->prog->expected_attach_type == BPF_LSM_CGROUP)
kernel/bpf/cgroup.c:317:				if (pl->link->link.prog->expected_attach_type == BPF_LSM_CGROUP)
kernel/bpf/cgroup.c:390:				    enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:419:				   enum cgroup_bpf_attach_type atype,
kernel/bpf/cgroup.c:463:				     enum cgroup_bpf_attach_type atype,
kernel/bpf/cgroup.c:522:				  enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:627:			       enum bpf_attach_type type, u32 flags)
kernel/bpf/cgroup.c:634:	enum cgroup_bpf_attach_type atype;
kernel/bpf/cgroup.c:744:			     enum bpf_attach_type type,
kernel/bpf/cgroup.c:759:				   enum cgroup_bpf_attach_type atype,
kernel/bpf/cgroup.c:814:	enum cgroup_bpf_attach_type atype;
kernel/bpf/cgroup.c:912:				  enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:968:			       struct bpf_cgroup_link *link, enum bpf_attach_type type)
kernel/bpf/cgroup.c:970:	enum cgroup_bpf_attach_type atype;
kernel/bpf/cgroup.c:1026:			     enum bpf_attach_type type)
kernel/bpf/cgroup.c:1043:	enum bpf_attach_type type = attr->query.attach_type;
kernel/bpf/cgroup.c:1044:	enum cgroup_bpf_attach_type from_atype, to_atype;
kernel/bpf/cgroup.c:1045:	enum cgroup_bpf_attach_type atype;
kernel/bpf/cgroup.c:1063:		from_atype = to_cgroup_bpf_attach_type(type);
kernel/bpf/cgroup.c:1168:				attr->attach_type, attr->attach_flags);
kernel/bpf/cgroup.c:1190:	ret = cgroup_bpf_detach(cgrp, prog, attr->attach_type);
kernel/bpf/cgroup.c:1260:		   "attach_type:\t%d\n",
kernel/bpf/cgroup.c:1278:	info->cgroup.attach_type = cg_link->type;
kernel/bpf/cgroup.c:1313:	link->type = attr->link_create.attach_type;
kernel/bpf/cgroup.c:1376:				enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:1453:			       enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:1483:				      enum cgroup_bpf_attach_type atype,
kernel/bpf/cgroup.c:1540:				     enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:1550:				      short access, enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:1713:				   enum cgroup_bpf_attach_type atype)
kernel/bpf/cgroup.c:2350:		if (prog->expected_attach_type == BPF_CGROUP_SETSOCKOPT)
kernel/bpf/cgroup.c:2354:		if (prog->expected_attach_type == BPF_CGROUP_SETSOCKOPT)
kernel/bpf/cgroup.c:2387:			return prog->expected_attach_type ==
kernel/bpf/cgroup.c:2394:			return prog->expected_attach_type ==
kernel/bpf/cgroup.c:2422:		return prog->expected_attach_type == BPF_CGROUP_GETSOCKOPT;
kernel/bpf/cgroup.c:2548:		switch (prog->expected_attach_type) {
kernel/bpf/cgroup.c:2566:		switch (prog->expected_attach_type) {
kernel/bpf/core.c:126:	aux->cgroup_atype = CGROUP_BPF_ATTACH_TYPE_INVALID;
kernel/bpf/core.c:2795:	if (aux->cgroup_atype != CGROUP_BPF_ATTACH_TYPE_INVALID)
kernel/bpf/cpumap.c:381:	if (prog->expected_attach_type != BPF_XDP_CPUMAP ||
kernel/bpf/devmap.c:882:		if (prog->expected_attach_type != BPF_XDP_DEVMAP ||
kernel/bpf/inode.c:638:		else if (strcmp(name, "bpf_attach_type") == 0)
kernel/bpf/inode.c:769:		mask = (1ULL << __MAX_BPF_ATTACH_TYPE) - 1;
kernel/bpf/local_storage.c:34:static bool attach_type_isolated(const struct bpf_map *map)
kernel/bpf/local_storage.c:42:	if (attach_type_isolated(&map->map)) {
kernel/bpf/local_storage.c:50:		else if (key1->attach_type < key2->attach_type)
kernel/bpf/local_storage.c:52:		else if (key1->attach_type > key2->attach_type)
kernel/bpf/local_storage.c:271:	if (attach_type_isolated(&map->map)) {
kernel/bpf/local_storage.c:361:	if (attach_type_isolated(map)) {
kernel/bpf/local_storage.c:369:		 *	__u32	attach_type;
kernel/bpf/local_storage.c:392:		offset = offsetof(struct bpf_cgroup_storage_key, attach_type);
kernel/bpf/local_storage.c:393:		size = sizeof_field(struct bpf_cgroup_storage_key, attach_type);
kernel/bpf/local_storage.c:576:			     enum bpf_attach_type type)
kernel/bpf/local_storage.c:583:	storage->key.attach_type = type;
kernel/bpf/syscall.c:2500:			    enum bpf_prog_type *attach_type, bool attach_drv)
kernel/bpf/syscall.c:2503:	if (!attach_type)
kernel/bpf/syscall.c:2506:	if (prog->type != *attach_type)
kernel/bpf/syscall.c:2514:static struct bpf_prog *__bpf_prog_get(u32 ufd, enum bpf_prog_type *attach_type,
kernel/bpf/syscall.c:2526:	if (!bpf_prog_get_ok(prog, attach_type, attach_drv))
kernel/bpf/syscall.c:2557:static void bpf_prog_load_fixup_attach_type(union bpf_attr *attr)
kernel/bpf/syscall.c:2564:		if (!attr->expected_attach_type)
kernel/bpf/syscall.c:2565:			attr->expected_attach_type =
kernel/bpf/syscall.c:2569:		if (!attr->expected_attach_type)
kernel/bpf/syscall.c:2570:			attr->expected_attach_type =
kernel/bpf/syscall.c:2578:			   enum bpf_attach_type expected_attach_type,
kernel/bpf/syscall.c:2609:		switch (expected_attach_type) {
kernel/bpf/syscall.c:2619:		switch (expected_attach_type) {
kernel/bpf/syscall.c:2642:		switch (expected_attach_type) {
kernel/bpf/syscall.c:2650:		switch (expected_attach_type) {
kernel/bpf/syscall.c:2658:		if (expected_attach_type == BPF_SK_LOOKUP)
kernel/bpf/syscall.c:2662:		switch (expected_attach_type) {
kernel/bpf/syscall.c:2670:		if (expected_attach_type == BPF_NETFILTER)
kernel/bpf/syscall.c:2675:		if (expected_attach_type)
kernel/bpf/syscall.c:2759:	bpf_prog_load_fixup_attach_type(attr);
kernel/bpf/syscall.c:2771:					       attr->expected_attach_type)) {
kernel/bpf/syscall.c:2845:	if (bpf_prog_load_check_attach(type, attr->expected_attach_type,
kernel/bpf/syscall.c:2867:	prog->expected_attach_type = attr->expected_attach_type;
kernel/bpf/syscall.c:3379:		   "attach_type:\t%d\n"
kernel/bpf/syscall.c:3382:		   tr_link->attach_type,
kernel/bpf/syscall.c:3393:	info->tracing.attach_type = tr_link->attach_type;
kernel/bpf/syscall.c:3422:		if (prog->expected_attach_type != BPF_TRACE_FENTRY &&
kernel/bpf/syscall.c:3423:		    prog->expected_attach_type != BPF_TRACE_FEXIT &&
kernel/bpf/syscall.c:3424:		    prog->expected_attach_type != BPF_MODIFY_RETURN) {
kernel/bpf/syscall.c:3430:		if (prog->expected_attach_type != 0) {
kernel/bpf/syscall.c:3436:		if (prog->expected_attach_type != BPF_LSM_MAC) {
kernel/bpf/syscall.c:3480:	link->attach_type = prog->expected_attach_type;
kernel/bpf/syscall.c:3944:		    prog->expected_attach_type == BPF_TRACE_RAW_TP) {
kernel/bpf/syscall.c:4019:attach_type_to_prog_type(enum bpf_attach_type attach_type)
kernel/bpf/syscall.c:4021:	switch (attach_type) {
kernel/bpf/syscall.c:4091:static int bpf_prog_attach_check_attach_type(const struct bpf_prog *prog,
kernel/bpf/syscall.c:4092:					     enum bpf_attach_type attach_type)
kernel/bpf/syscall.c:4101:		return attach_type == prog->expected_attach_type ? 0 : -EINVAL;
kernel/bpf/syscall.c:4109:		ptype = attach_type_to_prog_type(attach_type);
kernel/bpf/syscall.c:4113:		return prog->enforce_expected_attach_type &&
kernel/bpf/syscall.c:4114:			prog->expected_attach_type != attach_type ?
kernel/bpf/syscall.c:4119:		if (attach_type != BPF_NETFILTER)
kernel/bpf/syscall.c:4124:		if (attach_type != BPF_PERF_EVENT)
kernel/bpf/syscall.c:4128:		if (prog->expected_attach_type == BPF_TRACE_KPROBE_MULTI &&
kernel/bpf/syscall.c:4129:		    attach_type != BPF_TRACE_KPROBE_MULTI)
kernel/bpf/syscall.c:4131:		if (prog->expected_attach_type == BPF_TRACE_KPROBE_SESSION &&
kernel/bpf/syscall.c:4132:		    attach_type != BPF_TRACE_KPROBE_SESSION)
kernel/bpf/syscall.c:4134:		if (prog->expected_attach_type == BPF_TRACE_UPROBE_MULTI &&
kernel/bpf/syscall.c:4135:		    attach_type != BPF_TRACE_UPROBE_MULTI)
kernel/bpf/syscall.c:4137:		if (prog->expected_attach_type == BPF_TRACE_UPROBE_SESSION &&
kernel/bpf/syscall.c:4138:		    attach_type != BPF_TRACE_UPROBE_SESSION)
kernel/bpf/syscall.c:4140:		if (attach_type != BPF_PERF_EVENT &&
kernel/bpf/syscall.c:4141:		    attach_type != BPF_TRACE_KPROBE_MULTI &&
kernel/bpf/syscall.c:4142:		    attach_type != BPF_TRACE_KPROBE_SESSION &&
kernel/bpf/syscall.c:4143:		    attach_type != BPF_TRACE_UPROBE_MULTI &&
kernel/bpf/syscall.c:4144:		    attach_type != BPF_TRACE_UPROBE_SESSION)
kernel/bpf/syscall.c:4148:		if (attach_type != BPF_TCX_INGRESS &&
kernel/bpf/syscall.c:4149:		    attach_type != BPF_TCX_EGRESS &&
kernel/bpf/syscall.c:4150:		    attach_type != BPF_NETKIT_PRIMARY &&
kernel/bpf/syscall.c:4151:		    attach_type != BPF_NETKIT_PEER)
kernel/bpf/syscall.c:4155:		ptype = attach_type_to_prog_type(attach_type);
kernel/bpf/syscall.c:4185:	ptype = attach_type_to_prog_type(attr->attach_type);
kernel/bpf/syscall.c:4203:	if (bpf_prog_attach_check_attach_type(prog, attr->attach_type)) {
kernel/bpf/syscall.c:4228:		    prog->expected_attach_type != BPF_LSM_CGROUP)
kernel/bpf/syscall.c:4234:		if (attr->attach_type == BPF_TCX_INGRESS ||
kernel/bpf/syscall.c:4235:		    attr->attach_type == BPF_TCX_EGRESS)
kernel/bpf/syscall.c:4260:	ptype = attach_type_to_prog_type(attr->attach_type);
kernel/bpf/syscall.c:4299:		if (attr->attach_type == BPF_TCX_INGRESS ||
kernel/bpf/syscall.c:4300:		    attr->attach_type == BPF_TCX_EGRESS)
kernel/bpf/syscall.c:4326:	switch (attr->query.attach_type) {
kernel/bpf/syscall.c:5318:	if (attr->link_create.attach_type == BPF_STRUCT_OPS)
kernel/bpf/syscall.c:5325:	ret = bpf_prog_attach_check_attach_type(prog,
kernel/bpf/syscall.c:5326:						attr->link_create.attach_type);
kernel/bpf/syscall.c:5348:		if (attr->link_create.attach_type != prog->expected_attach_type) {
kernel/bpf/syscall.c:5352:		if (prog->expected_attach_type == BPF_TRACE_RAW_TP)
kernel/bpf/syscall.c:5354:		else if (prog->expected_attach_type == BPF_TRACE_ITER)
kernel/bpf/syscall.c:5356:		else if (prog->expected_attach_type == BPF_LSM_CGROUP)
kernel/bpf/syscall.c:5377:		if (attr->link_create.attach_type == BPF_TCX_INGRESS ||
kernel/bpf/syscall.c:5378:		    attr->link_create.attach_type == BPF_TCX_EGRESS)
kernel/bpf/syscall.c:5392:		if (attr->link_create.attach_type == BPF_PERF_EVENT)
kernel/bpf/syscall.c:5394:		else if (attr->link_create.attach_type == BPF_TRACE_KPROBE_MULTI ||
kernel/bpf/syscall.c:5395:			 attr->link_create.attach_type == BPF_TRACE_KPROBE_SESSION)
kernel/bpf/syscall.c:5397:		else if (attr->link_create.attach_type == BPF_TRACE_UPROBE_MULTI ||
kernel/bpf/syscall.c:5398:			 attr->link_create.attach_type == BPF_TRACE_UPROBE_SESSION)
kernel/bpf/token.c:94:	BUILD_BUG_ON(__MAX_BPF_ATTACH_TYPE >= 64);
kernel/bpf/token.c:95:	mask = BIT_ULL(__MAX_BPF_ATTACH_TYPE) - 1;
kernel/bpf/token.c:248:			       enum bpf_attach_type attach_type)
kernel/bpf/token.c:250:	if (!token || prog_type >= __MAX_BPF_PROG_TYPE || attach_type >= __MAX_BPF_ATTACH_TYPE)
kernel/bpf/token.c:254:	       (token->allowed_attachs & BIT_ULL(attach_type));
kernel/bpf/trampoline.c:109:	enum bpf_attach_type eatype = prog->expected_attach_type;
kernel/bpf/trampoline.c:509:static enum bpf_tramp_prog_type bpf_attach_type_to_tramp(struct bpf_prog *prog)
kernel/bpf/trampoline.c:511:	switch (prog->expected_attach_type) {
kernel/bpf/trampoline.c:558:	kind = bpf_attach_type_to_tramp(link->link.prog);
kernel/bpf/trampoline.c:620:	kind = bpf_attach_type_to_tramp(link->link.prog);
kernel/bpf/trampoline.c:701:	p->expected_attach_type = BPF_LSM_MAC;
kernel/bpf/trampoline.c:1067:	    prog->expected_attach_type == BPF_LSM_CGROUP)
kernel/bpf/trampoline.c:1082:	    prog->expected_attach_type == BPF_LSM_CGROUP)
kernel/bpf/verifier.c:7078:		prog->expected_attach_type == BPF_LSM_MAC &&
kernel/bpf/verifier.c:9244:	enum bpf_attach_type eatype = env->prog->expected_attach_type;
kernel/bpf/verifier.c:10861:		    env->prog->expected_attach_type == BPF_LSM_CGROUP) {
kernel/bpf/verifier.c:12130:		if (env->prog->expected_attach_type == BPF_TRACE_ITER)
kernel/bpf/verifier.c:16010:	struct tnum enforce_attach_type_range = tnum_unknown;
kernel/bpf/verifier.c:16024:			if (prog->expected_attach_type == BPF_LSM_CGROUP)
kernel/bpf/verifier.c:16072:		if (env->prog->expected_attach_type == BPF_CGROUP_UDP4_RECVMSG ||
kernel/bpf/verifier.c:16073:		    env->prog->expected_attach_type == BPF_CGROUP_UDP6_RECVMSG ||
kernel/bpf/verifier.c:16074:		    env->prog->expected_attach_type == BPF_CGROUP_UNIX_RECVMSG ||
kernel/bpf/verifier.c:16075:		    env->prog->expected_attach_type == BPF_CGROUP_INET4_GETPEERNAME ||
kernel/bpf/verifier.c:16076:		    env->prog->expected_attach_type == BPF_CGROUP_INET6_GETPEERNAME ||
kernel/bpf/verifier.c:16077:		    env->prog->expected_attach_type == BPF_CGROUP_UNIX_GETPEERNAME ||
kernel/bpf/verifier.c:16078:		    env->prog->expected_attach_type == BPF_CGROUP_INET4_GETSOCKNAME ||
kernel/bpf/verifier.c:16079:		    env->prog->expected_attach_type == BPF_CGROUP_INET6_GETSOCKNAME ||
kernel/bpf/verifier.c:16080:		    env->prog->expected_attach_type == BPF_CGROUP_UNIX_GETSOCKNAME)
kernel/bpf/verifier.c:16082:		if (env->prog->expected_attach_type == BPF_CGROUP_INET4_BIND ||
kernel/bpf/verifier.c:16083:		    env->prog->expected_attach_type == BPF_CGROUP_INET6_BIND)
kernel/bpf/verifier.c:16087:		if (env->prog->expected_attach_type == BPF_CGROUP_INET_EGRESS) {
kernel/bpf/verifier.c:16089:			enforce_attach_type_range = tnum_range(2, 3);
kernel/bpf/verifier.c:16104:		switch (env->prog->expected_attach_type) {
kernel/bpf/verifier.c:16119:		switch (env->prog->expected_attach_type) {
kernel/bpf/verifier.c:16133:		if (env->prog->expected_attach_type != BPF_LSM_CGROUP) {
kernel/bpf/verifier.c:16174:		    prog->expected_attach_type == BPF_LSM_CGROUP &&
kernel/bpf/verifier.c:16181:	if (!tnum_is_unknown(enforce_attach_type_range) &&
kernel/bpf/verifier.c:16182:	    tnum_in(enforce_attach_type_range, reg->var_off))
kernel/bpf/verifier.c:16183:		env->prog->enforce_expected_attach_type = 1;
kernel/bpf/verifier.c:20672:	enum bpf_attach_type eatype = prog->expected_attach_type;
kernel/bpf/verifier.c:22011:	member_idx = prog->expected_attach_type;
kernel/bpf/verifier.c:22204:		    (tgt_prog->expected_attach_type == BPF_TRACE_FENTRY ||
kernel/bpf/verifier.c:22205:		     tgt_prog->expected_attach_type == BPF_TRACE_FEXIT)) {
kernel/bpf/verifier.c:22230:	switch (prog->expected_attach_type) {
kernel/bpf/verifier.c:22316:		if ((prog->aux->saved_dst_prog_type || prog->aux->saved_dst_attach_type) &&
kernel/bpf/verifier.c:22318:		     prog->aux->saved_dst_attach_type != tgt_prog->expected_attach_type))
kernel/bpf/verifier.c:22389:		} else if (prog->expected_attach_type == BPF_MODIFY_RETURN) {
kernel/bpf/verifier.c:22437:		switch (prog->expected_attach_type) {
kernel/bpf/verifier.c:22493:		prog->expected_attach_type = tgt_prog->expected_attach_type;
kernel/bpf/verifier.c:22503:		prog->aux->saved_dst_attach_type = tgt_prog->expected_attach_type;
kernel/bpf/verifier.c:22506:	if (prog->expected_attach_type == BPF_TRACE_RAW_TP) {
kernel/bpf/verifier.c:22509:	} else if (prog->expected_attach_type == BPF_TRACE_ITER) {
kernel/bpf/verifier.c:22788:		env->prog->expected_attach_type = 0;
kernel/trace/bpf_trace.c:956:	    prog->expected_attach_type == BPF_TRACE_ITER)
kernel/trace/bpf_trace.c:1575:	return prog->expected_attach_type == BPF_TRACE_KPROBE_MULTI ||
kernel/trace/bpf_trace.c:1576:	       prog->expected_attach_type == BPF_TRACE_KPROBE_SESSION;
kernel/trace/bpf_trace.c:1581:	return prog->expected_attach_type == BPF_TRACE_KPROBE_SESSION;
kernel/trace/bpf_trace.c:1586:	return prog->expected_attach_type == BPF_TRACE_UPROBE_MULTI ||
kernel/trace/bpf_trace.c:1587:	       prog->expected_attach_type == BPF_TRACE_UPROBE_SESSION;
kernel/trace/bpf_trace.c:1592:	return prog->expected_attach_type == BPF_TRACE_UPROBE_SESSION;
kernel/trace/bpf_trace.c:2014:		return prog->expected_attach_type == BPF_TRACE_ITER ?
kernel/trace/bpf_trace.c:2018:		return prog->expected_attach_type == BPF_TRACE_ITER ?
kernel/trace/bpf_trace.c:2022:		return prog->expected_attach_type == BPF_TRACE_ITER ?
kernel/trace/bpf_trace.c:2035:		    prog->expected_attach_type == BPF_TRACE_RAW_TP)
kernel/trace/bpf_trace.c:2040:		if (!fn && prog->expected_attach_type == BPF_TRACE_ITER)
net/bpf/bpf_dummy_struct_ops.c:176:	op_idx = prog->expected_attach_type;
net/bpf/test_run.c:694:	switch (prog->expected_attach_type) {
net/bpf/test_run.c:1218:	if (prog->expected_attach_type == BPF_XDP_DEVMAP ||
net/bpf/test_run.c:1219:	    prog->expected_attach_type == BPF_XDP_CPUMAP)
net/core/flow_dissector.c:80:	enum netns_bpf_attach_type type = NETNS_BPF_FLOW_DISSECTOR;
net/core/flow_dissector.c:1122:		enum netns_bpf_attach_type type = NETNS_BPF_FLOW_DISSECTOR;
net/core/bpf_sk_storage.c:367:	switch (prog->expected_attach_type) {
net/core/dev.c:9697:		if (new_prog->expected_attach_type == BPF_XDP_DEVMAP) {
net/core/dev.c:9701:		if (new_prog->expected_attach_type == BPF_XDP_CPUMAP) {
net/core/dev.c:9837:	    old_prog->expected_attach_type != new_prog->expected_attach_type) {
net/core/filter.c:7991:		switch (prog->expected_attach_type) {
net/core/filter.c:8019:		switch (prog->expected_attach_type) {
net/core/filter.c:8042:		switch (prog->expected_attach_type) {
net/core/filter.c:8764:static bool __sock_filter_check_attach_type(int off,
net/core/filter.c:8766:					    enum bpf_attach_type attach_type)
net/core/filter.c:8772:		switch (attach_type) {
net/core/filter.c:8780:		switch (attach_type) {
net/core/filter.c:8787:		switch (attach_type) {
net/core/filter.c:8794:		switch (attach_type) {
net/core/filter.c:8864:	return __sock_filter_check_attach_type(off, type,
net/core/filter.c:8865:					       prog->expected_attach_type);
net/core/filter.c:9042:	if (prog->expected_attach_type != BPF_XDP_DEVMAP) {
net/core/filter.c:9123:		switch (prog->expected_attach_type) {
net/core/filter.c:9136:		switch (prog->expected_attach_type) {
net/core/filter.c:9149:		switch (prog->expected_attach_type) {
net/core/filter.c:9158:		switch (prog->expected_attach_type) {
net/core/filter.c:12183:	    prog->expected_attach_type != BPF_TRACE_ITER)
net/core/sock_map.c:81:	ret = sock_map_prog_update(map, prog, NULL, NULL, attr->attach_type);
net/core/sock_map.c:110:	ret = sock_map_prog_update(map, NULL, prog, NULL, attr->attach_type);
net/core/sock_map.c:1570:	ret = sock_map_prog_link_lookup(map, &pprog, NULL, attr->query.attach_type);
net/core/sock_map.c:1706:	enum bpf_attach_type attach_type;
net/core/sock_map.c:1718:					  sockmap_link->attach_type));
net/core/sock_map.c:1759:	    link->prog->expected_attach_type != prog->expected_attach_type) {
net/core/sock_map.c:1769:					sockmap_link->attach_type);
net/core/sock_map.c:1814:	info->sockmap.attach_type = sockmap_link->attach_type;
net/core/sock_map.c:1825:	seq_printf(seq, "attach_type:\t%u\n", sockmap_link->attach_type);
net/core/sock_map.c:1841:	enum bpf_attach_type attach_type;
net/core/sock_map.c:1862:	attach_type = attr->link_create.attach_type;
net/core/sock_map.c:1865:	sockmap_link->attach_type = attach_type;
net/core/sock_map.c:1874:	ret = sock_map_prog_update(map, prog, NULL, &sockmap_link->link, attach_type);
net/core/sock_reuseport.c:476:		    (prog && prog->expected_attach_type == BPF_SK_REUSEPORT_SELECT_OR_MIGRATE)) {
net/core/sock_reuseport.c:646:	if (!prog || prog->expected_attach_type != BPF_SK_REUSEPORT_SELECT_OR_MIGRATE) {
net/ipv4/bpf_tcp_ca.c:144:	midx = prog->expected_attach_type;
samples/bpf/hbm.c:199:		bpf_program__set_expected_attach_type(bpf_prog, BPF_CGROUP_INET_INGRESS);

tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:29:| **bpftool** **cgroup attach** *CGROUP* *ATTACH_TYPE* *PROG* [*ATTACH_FLAGS*]
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:30:| **bpftool** **cgroup detach** *CGROUP* *ATTACH_TYPE* *PROG*
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:34:| *ATTACH_TYPE* := { **cgroup_inet_ingress** | **cgroup_inet_egress** |
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:74:bpftool cgroup attach *CGROUP* *ATTACH_TYPE* *PROG* [*ATTACH_FLAGS*]
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:75:    Attach program *PROG* to the cgroup *CGROUP* with attach type *ATTACH_TYPE*
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:93:    *ATTACH_TYPE* can be one of:
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:124:bpftool cgroup detach *CGROUP* *ATTACH_TYPE* *PROG*
tools/bpf/bpftool/Documentation/bpftool-cgroup.rst:125:    Detach *PROG* from the cgroup *CGROUP* and attach type *ATTACH_TYPE*.
tools/bpf/bpftool/Documentation/bpftool-feature.rst:31:| *GROUP* := { **prog_types** | **map_types** | **attach_types** | **link_types** | **helpers** }
tools/bpf/bpftool/Documentation/bpftool-feature.rst:72:    (**attach_types**), link types (**link_types**), or BPF helper functions
tools/bpf/bpftool/Documentation/bpftool-link.rst:81:            cgroup_id 614  attach_type egress
tools/bpf/bpftool/Documentation/bpftool-link.rst:92:            "attach_type": "egress",
tools/bpf/bpftool/Documentation/bpftool-prog.rst:35:| **bpftool** **prog attach** *PROG* *ATTACH_TYPE* [*MAP*]
tools/bpf/bpftool/Documentation/bpftool-prog.rst:36:| **bpftool** **prog detach** *PROG* *ATTACH_TYPE* [*MAP*]
tools/bpf/bpftool/Documentation/bpftool-prog.rst:58:| *ATTACH_TYPE* := {
tools/bpf/bpftool/Documentation/bpftool-prog.rst:159:bpftool prog attach *PROG* *ATTACH_TYPE* [*MAP*]
tools/bpf/bpftool/Documentation/bpftool-prog.rst:160:    Attach bpf program *PROG* (with type specified by *ATTACH_TYPE*). Most
tools/bpf/bpftool/Documentation/bpftool-prog.rst:161:    *ATTACH_TYPEs* require a *MAP* parameter, with the exception of
tools/bpf/bpftool/Documentation/bpftool-prog.rst:164:bpftool prog detach *PROG* *ATTACH_TYPE* [*MAP*]
tools/bpf/bpftool/Documentation/bpftool-prog.rst:165:    Detach bpf program *PROG* (with type specified by *ATTACH_TYPE*). Most
tools/bpf/bpftool/Documentation/bpftool-prog.rst:166:    *ATTACH_TYPEs* require a *MAP* parameter, with the exception of
tools/bpf/bpftool/Documentation/bpftool-net.rst:27:| **bpftool** **net attach** *ATTACH_TYPE* *PROG* **dev** *NAME* [ **overwrite** ]
tools/bpf/bpftool/Documentation/bpftool-net.rst:28:| **bpftool** **net detach** *ATTACH_TYPE* **dev** *NAME*
tools/bpf/bpftool/Documentation/bpftool-net.rst:32:| *ATTACH_TYPE* := { **xdp** | **xdpgeneric** | **xdpdrv** | **xdpoffload** | **tcx_ingress** | **tcx_egress** }
tools/bpf/bpftool/Documentation/bpftool-net.rst:61:bpftool net attach *ATTACH_TYPE* *PROG* dev *NAME* [ overwrite ]
tools/bpf/bpftool/Documentation/bpftool-net.rst:63:    by *ATTACH_TYPE*. Previously attached bpf program can be replaced by the
tools/bpf/bpftool/Documentation/bpftool-net.rst:65:    are supported for *ATTACH_TYPE*.
tools/bpf/bpftool/Documentation/bpftool-net.rst:67:    *ATTACH_TYPE* can be of:
tools/bpf/bpftool/Documentation/bpftool-net.rst:75:bpftool net detach *ATTACH_TYPE* dev *NAME*
tools/bpf/bpftool/Documentation/bpftool-net.rst:77:    by *ATTACH_TYPE*. To detach bpf program, same *ATTACH_TYPE* previously used
tools/bpf/bpftool/Documentation/bpftool-net.rst:79:    supported for *ATTACH_TYPE*.
tools/bpf/bpftool/bash-completion/bpftool:419:                            local BPFTOOL_PROG_ATTACH_TYPES='sk_msg_verdict \
tools/bpf/bpftool/bash-completion/bpftool:422:                            COMPREPLY=( $( compgen -W "$BPFTOOL_PROG_ATTACH_TYPES" -- "$cur" ) )
tools/bpf/bpftool/bash-completion/bpftool:1027:                    local BPFTOOL_CGROUP_ATTACH_TYPES="$(bpftool feature list_builtins attach_types 2>/dev/null | \
tools/bpf/bpftool/bash-completion/bpftool:1038:                    elif [[ $BPFTOOL_CGROUP_ATTACH_TYPES =~ $prev ]]; then
tools/bpf/bpftool/bash-completion/bpftool:1050:                            if ! _bpftool_search_list "$BPFTOOL_CGROUP_ATTACH_TYPES"; then
tools/bpf/bpftool/bash-completion/bpftool:1052:                                    "$BPFTOOL_CGROUP_ATTACH_TYPES" -- "$cur" ) )
tools/bpf/bpftool/bash-completion/bpftool:1082:            local ATTACH_TYPES='xdp xdpgeneric xdpdrv xdpoffload tcx_ingress tcx_egress'
tools/bpf/bpftool/bash-completion/bpftool:1092:                            COMPREPLY=( $( compgen -W "$ATTACH_TYPES" -- "$cur" ) )
tools/bpf/bpftool/bash-completion/bpftool:1126:                            COMPREPLY=( $( compgen -W "$ATTACH_TYPES" -- "$cur" ) )
tools/bpf/bpftool/bash-completion/bpftool:1158:                        attach_types link_types helpers' -- "$cur" ) )
tools/bpf/bpftool/cgroup.c:22:static const int cgroup_attach_types[] = {
tools/bpf/bpftool/cgroup.c:57:#define HELP_SPEC_ATTACH_TYPES						\
tools/bpf/bpftool/cgroup.c:58:	"       ATTACH_TYPE := { cgroup_inet_ingress | cgroup_inet_egress |\n" \
tools/bpf/bpftool/cgroup.c:77:static enum bpf_attach_type parse_attach_type(const char *str)
tools/bpf/bpftool/cgroup.c:79:	const char *attach_type_str;
tools/bpf/bpftool/cgroup.c:80:	enum bpf_attach_type type;
tools/bpf/bpftool/cgroup.c:83:		attach_type_str = libbpf_bpf_attach_type_str(type);
tools/bpf/bpftool/cgroup.c:84:		if (!attach_type_str)
tools/bpf/bpftool/cgroup.c:86:		if (!strcmp(str, attach_type_str))
tools/bpf/bpftool/cgroup.c:94:		attach_type_str = bpf_attach_type_input_str(type);
tools/bpf/bpftool/cgroup.c:95:		if (!attach_type_str)
tools/bpf/bpftool/cgroup.c:97:		if (is_prefix(str, attach_type_str))
tools/bpf/bpftool/cgroup.c:101:	return __MAX_BPF_ATTACH_TYPE;
tools/bpf/bpftool/cgroup.c:130:static int show_bpf_prog(int id, enum bpf_attach_type attach_type,
tools/bpf/bpftool/cgroup.c:137:	const char *attach_type_str;
tools/bpf/bpftool/cgroup.c:150:	attach_type_str = libbpf_bpf_attach_type_str(attach_type);
tools/bpf/bpftool/cgroup.c:169:		if (attach_type_str)
tools/bpf/bpftool/cgroup.c:170:			jsonw_string_field(json_wtr, "attach_type", attach_type_str);
tools/bpf/bpftool/cgroup.c:172:			jsonw_uint_field(json_wtr, "attach_type", attach_type);
tools/bpf/bpftool/cgroup.c:183:		if (attach_type_str)
tools/bpf/bpftool/cgroup.c:184:			printf("%-15s", attach_type_str);
tools/bpf/bpftool/cgroup.c:186:			printf("type %-10u", attach_type);
tools/bpf/bpftool/cgroup.c:203:static int count_attached_bpf_progs(int cgroup_fd, enum bpf_attach_type type)
tools/bpf/bpftool/cgroup.c:221:	for (i = 0; i < ARRAY_SIZE(cgroup_attach_types); i++) {
tools/bpf/bpftool/cgroup.c:222:		int count = count_attached_bpf_progs(cgroup_fd, cgroup_attach_types[i]);
tools/bpf/bpftool/cgroup.c:236:static int show_effective_bpf_progs(int cgroup_fd, enum bpf_attach_type type,
tools/bpf/bpftool/cgroup.c:261:static int show_attached_bpf_progs(int cgroup_fd, enum bpf_attach_type type,
tools/bpf/bpftool/cgroup.c:311:static int show_bpf_progs(int cgroup_fd, enum bpf_attach_type type,
tools/bpf/bpftool/cgroup.c:321:	enum bpf_attach_type type;
tools/bpf/bpftool/cgroup.c:373:	for (type = 0; type < __MAX_BPF_ATTACH_TYPE; type++) {
tools/bpf/bpftool/cgroup.c:403:	enum bpf_attach_type type;
tools/bpf/bpftool/cgroup.c:437:	for (type = 0; type < __MAX_BPF_ATTACH_TYPE; type++)
tools/bpf/bpftool/cgroup.c:546:	enum bpf_attach_type attach_type;
tools/bpf/bpftool/cgroup.c:563:	attach_type = parse_attach_type(argv[1]);
tools/bpf/bpftool/cgroup.c:564:	if (attach_type == __MAX_BPF_ATTACH_TYPE) {
tools/bpf/bpftool/cgroup.c:586:	if (bpf_prog_attach(prog_fd, cgroup_fd, attach_type, attach_flags)) {
tools/bpf/bpftool/cgroup.c:606:	enum bpf_attach_type attach_type;
tools/bpf/bpftool/cgroup.c:621:	attach_type = parse_attach_type(argv[1]);
tools/bpf/bpftool/cgroup.c:622:	if (attach_type == __MAX_BPF_ATTACH_TYPE) {
tools/bpf/bpftool/cgroup.c:633:	if (bpf_prog_detach2(prog_fd, cgroup_fd, attach_type)) {
tools/bpf/bpftool/cgroup.c:661:		"       %1$s %2$s attach CGROUP ATTACH_TYPE PROG [ATTACH_FLAGS]\n"
tools/bpf/bpftool/cgroup.c:662:		"       %1$s %2$s detach CGROUP ATTACH_TYPE PROG\n"
tools/bpf/bpftool/cgroup.c:665:		HELP_SPEC_ATTACH_TYPES "\n"
tools/bpf/bpftool/common.c:1134:const char *bpf_attach_type_input_str(enum bpf_attach_type t)
tools/bpf/bpftool/common.c:1166:	default:	return libbpf_bpf_attach_type_str(t);
tools/bpf/bpftool/gen.c:585:			if (bpf_program__expected_attach_type(prog) == BPF_TRACE_ITER)
tools/bpf/bpftool/link.c:142:static void show_link_attach_type_json(__u32 attach_type, json_writer_t *wtr)
tools/bpf/bpftool/link.c:144:	const char *attach_type_str;
tools/bpf/bpftool/link.c:146:	attach_type_str = libbpf_bpf_attach_type_str(attach_type);
tools/bpf/bpftool/link.c:147:	if (attach_type_str)
tools/bpf/bpftool/link.c:148:		jsonw_string_field(wtr, "attach_type", attach_type_str);
tools/bpf/bpftool/link.c:150:		jsonw_uint_field(wtr, "attach_type", attach_type);
tools/bpf/bpftool/link.c:500:		show_link_attach_type_json(info->tracing.attach_type,
tools/bpf/bpftool/link.c:508:		show_link_attach_type_json(info->cgroup.attach_type, json_wtr);
tools/bpf/bpftool/link.c:516:		show_link_attach_type_json(info->netns.attach_type, json_wtr);
tools/bpf/bpftool/link.c:523:		show_link_attach_type_json(info->tcx.attach_type, json_wtr);
tools/bpf/bpftool/link.c:527:		show_link_attach_type_json(info->netkit.attach_type, json_wtr);
tools/bpf/bpftool/link.c:531:		show_link_attach_type_json(info->sockmap.attach_type, json_wtr);
tools/bpf/bpftool/link.c:604:static void show_link_attach_type_plain(__u32 attach_type)
tools/bpf/bpftool/link.c:606:	const char *attach_type_str;
tools/bpf/bpftool/link.c:608:	attach_type_str = libbpf_bpf_attach_type_str(attach_type);
tools/bpf/bpftool/link.c:609:	if (attach_type_str)
tools/bpf/bpftool/link.c:610:		printf("attach_type %s  ", attach_type_str);
tools/bpf/bpftool/link.c:612:		printf("attach_type %u  ", attach_type);
tools/bpf/bpftool/link.c:892:		show_link_attach_type_plain(info->tracing.attach_type);
tools/bpf/bpftool/link.c:900:		show_link_attach_type_plain(info->cgroup.attach_type);
tools/bpf/bpftool/link.c:907:		show_link_attach_type_plain(info->netns.attach_type);
tools/bpf/bpftool/link.c:915:		show_link_attach_type_plain(info->tcx.attach_type);
tools/bpf/bpftool/link.c:920:		show_link_attach_type_plain(info->netkit.attach_type);
tools/bpf/bpftool/link.c:925:		show_link_attach_type_plain(info->sockmap.attach_type);
tools/bpf/bpftool/main.h:249:/* bpf_attach_type_input_str - convert the provided attach type value into a
tools/bpf/bpftool/main.h:252: * This function is similar in nature to libbpf_bpf_attach_type_str, but
tools/bpf/bpftool/main.h:259: * returned for unknown bpf_attach_type values.
tools/bpf/bpftool/main.h:261:const char *bpf_attach_type_input_str(enum bpf_attach_type t);
tools/bpf/bpftool/feature.c:1278:	} else if (is_prefix(*argv, "attach_types")) {
tools/bpf/bpftool/feature.c:1279:		get_name = (const char *(*)(unsigned int))libbpf_bpf_attach_type_str;
tools/bpf/bpftool/feature.c:1285:		p_err("expected 'prog_types', 'map_types', 'attach_types', 'link_types' or 'helpers', got: %s", *argv);
tools/bpf/bpftool/feature.c:1323:		"       GROUP := { prog_types | map_types | attach_types | link_types | helpers }\n"
tools/bpf/bpftool/net.c:65:enum net_attach_type {
tools/bpf/bpftool/net.c:66:	NET_ATTACH_TYPE_XDP,
tools/bpf/bpftool/net.c:67:	NET_ATTACH_TYPE_XDP_GENERIC,
tools/bpf/bpftool/net.c:68:	NET_ATTACH_TYPE_XDP_DRIVER,
tools/bpf/bpftool/net.c:69:	NET_ATTACH_TYPE_XDP_OFFLOAD,
tools/bpf/bpftool/net.c:70:	NET_ATTACH_TYPE_TCX_INGRESS,
tools/bpf/bpftool/net.c:71:	NET_ATTACH_TYPE_TCX_EGRESS,
tools/bpf/bpftool/net.c:74:static const char * const attach_type_strings[] = {
tools/bpf/bpftool/net.c:75:	[NET_ATTACH_TYPE_XDP]		= "xdp",
tools/bpf/bpftool/net.c:76:	[NET_ATTACH_TYPE_XDP_GENERIC]	= "xdpgeneric",
tools/bpf/bpftool/net.c:77:	[NET_ATTACH_TYPE_XDP_DRIVER]	= "xdpdrv",
tools/bpf/bpftool/net.c:78:	[NET_ATTACH_TYPE_XDP_OFFLOAD]	= "xdpoffload",
tools/bpf/bpftool/net.c:79:	[NET_ATTACH_TYPE_TCX_INGRESS]	= "tcx_ingress",
tools/bpf/bpftool/net.c:80:	[NET_ATTACH_TYPE_TCX_EGRESS]	= "tcx_egress",
tools/bpf/bpftool/net.c:90:const size_t net_attach_type_size = ARRAY_SIZE(attach_type_strings);
tools/bpf/bpftool/net.c:92:static enum net_attach_type parse_attach_type(const char *str)
tools/bpf/bpftool/net.c:94:	enum net_attach_type type;
tools/bpf/bpftool/net.c:96:	for (type = 0; type < net_attach_type_size; type++) {
tools/bpf/bpftool/net.c:97:		if (attach_type_strings[type] &&
tools/bpf/bpftool/net.c:98:		    is_prefix(str, attach_type_strings[type]))
tools/bpf/bpftool/net.c:102:	return net_attach_type_size;
tools/bpf/bpftool/net.c:459:			      const enum bpf_attach_type loc)
tools/bpf/bpftool/net.c:637:static int do_attach_detach_xdp(int progfd, enum net_attach_type attach_type,
tools/bpf/bpftool/net.c:644:	if (attach_type == NET_ATTACH_TYPE_XDP_GENERIC)
tools/bpf/bpftool/net.c:646:	if (attach_type == NET_ATTACH_TYPE_XDP_DRIVER)
tools/bpf/bpftool/net.c:648:	if (attach_type == NET_ATTACH_TYPE_XDP_OFFLOAD)
tools/bpf/bpftool/net.c:654:static int get_tcx_type(enum net_attach_type attach_type)
tools/bpf/bpftool/net.c:656:	switch (attach_type) {
tools/bpf/bpftool/net.c:657:	case NET_ATTACH_TYPE_TCX_INGRESS:
tools/bpf/bpftool/net.c:659:	case NET_ATTACH_TYPE_TCX_EGRESS:
tools/bpf/bpftool/net.c:666:static int do_attach_tcx(int progfd, enum net_attach_type attach_type, int ifindex)
tools/bpf/bpftool/net.c:668:	int type = get_tcx_type(attach_type);
tools/bpf/bpftool/net.c:673:static int do_detach_tcx(int targetfd, enum net_attach_type attach_type)
tools/bpf/bpftool/net.c:675:	int type = get_tcx_type(attach_type);
tools/bpf/bpftool/net.c:682:	enum net_attach_type attach_type;
tools/bpf/bpftool/net.c:690:	attach_type = parse_attach_type(*argv);
tools/bpf/bpftool/net.c:691:	if (attach_type == net_attach_type_size) {
tools/bpf/bpftool/net.c:717:	switch (attach_type) {
tools/bpf/bpftool/net.c:719:	case NET_ATTACH_TYPE_XDP:
tools/bpf/bpftool/net.c:720:	case NET_ATTACH_TYPE_XDP_GENERIC:
tools/bpf/bpftool/net.c:721:	case NET_ATTACH_TYPE_XDP_DRIVER:
tools/bpf/bpftool/net.c:722:	case NET_ATTACH_TYPE_XDP_OFFLOAD:
tools/bpf/bpftool/net.c:723:		err = do_attach_detach_xdp(progfd, attach_type, ifindex, overwrite);
tools/bpf/bpftool/net.c:726:	case NET_ATTACH_TYPE_TCX_INGRESS:
tools/bpf/bpftool/net.c:727:	case NET_ATTACH_TYPE_TCX_EGRESS:
tools/bpf/bpftool/net.c:728:		err = do_attach_tcx(progfd, attach_type, ifindex);
tools/bpf/bpftool/net.c:736:		      attach_type_strings[attach_type], strerror(-err));
tools/bpf/bpftool/net.c:749:	enum net_attach_type attach_type;
tools/bpf/bpftool/net.c:756:	attach_type = parse_attach_type(*argv);
tools/bpf/bpftool/net.c:757:	if (attach_type == net_attach_type_size) {
tools/bpf/bpftool/net.c:767:	switch (attach_type) {
tools/bpf/bpftool/net.c:769:	case NET_ATTACH_TYPE_XDP:
tools/bpf/bpftool/net.c:770:	case NET_ATTACH_TYPE_XDP_GENERIC:
tools/bpf/bpftool/net.c:771:	case NET_ATTACH_TYPE_XDP_DRIVER:
tools/bpf/bpftool/net.c:772:	case NET_ATTACH_TYPE_XDP_OFFLOAD:
tools/bpf/bpftool/net.c:774:		err = do_attach_detach_xdp(progfd, attach_type, ifindex, NULL);
tools/bpf/bpftool/net.c:777:	case NET_ATTACH_TYPE_TCX_INGRESS:
tools/bpf/bpftool/net.c:778:	case NET_ATTACH_TYPE_TCX_EGRESS:
tools/bpf/bpftool/net.c:779:		err = do_detach_tcx(ifindex, attach_type);
tools/bpf/bpftool/net.c:787:		      attach_type_strings[attach_type], strerror(-err));
tools/bpf/bpftool/net.c:985:		"       %1$s %2$s attach ATTACH_TYPE PROG dev <devname> [ overwrite ]\n"
tools/bpf/bpftool/net.c:986:		"       %1$s %2$s detach ATTACH_TYPE dev <devname>\n"
tools/bpf/bpftool/net.c:990:		"       ATTACH_TYPE := { xdp | xdpgeneric | xdpdrv | xdpoffload | tcx_ingress\n"
tools/bpf/bpftool/prog.c:46:static const bool attach_types[] = {
tools/bpf/bpftool/prog.c:52:	[__MAX_BPF_ATTACH_TYPE] = false,
tools/bpf/bpftool/prog.c:58:static const char * const attach_type_strings[] = {
tools/bpf/bpftool/prog.c:63:	[__MAX_BPF_ATTACH_TYPE] = NULL,
tools/bpf/bpftool/prog.c:68:static enum bpf_attach_type parse_attach_type(const char *str)
tools/bpf/bpftool/prog.c:70:	enum bpf_attach_type type;
tools/bpf/bpftool/prog.c:72:	for (type = 0; type < __MAX_BPF_ATTACH_TYPE; type++) {
tools/bpf/bpftool/prog.c:73:		if (attach_types[type]) {
tools/bpf/bpftool/prog.c:74:			const char *attach_type_str;
tools/bpf/bpftool/prog.c:76:			attach_type_str = libbpf_bpf_attach_type_str(type);
tools/bpf/bpftool/prog.c:77:			if (!strcmp(str, attach_type_str))
tools/bpf/bpftool/prog.c:81:		if (attach_type_strings[type] &&
tools/bpf/bpftool/prog.c:82:		    is_prefix(str, attach_type_strings[type]))
tools/bpf/bpftool/prog.c:86:	return __MAX_BPF_ATTACH_TYPE;
tools/bpf/bpftool/prog.c:1040:				    enum bpf_attach_type *attach_type,
tools/bpf/bpftool/prog.c:1050:	*attach_type = parse_attach_type(*argv);
tools/bpf/bpftool/prog.c:1051:	if (*attach_type == __MAX_BPF_ATTACH_TYPE) {
tools/bpf/bpftool/prog.c:1056:	if (*attach_type == BPF_FLOW_DISSECTOR) {
tools/bpf/bpftool/prog.c:1074:	enum bpf_attach_type attach_type;
tools/bpf/bpftool/prog.c:1079:				       &progfd, &attach_type, &mapfd);
tools/bpf/bpftool/prog.c:1083:	err = bpf_prog_attach(progfd, mapfd, attach_type, 0);
tools/bpf/bpftool/prog.c:1096:	enum bpf_attach_type attach_type;
tools/bpf/bpftool/prog.c:1101:				       &progfd, &attach_type, &mapfd);
tools/bpf/bpftool/prog.c:1105:	err = bpf_prog_detach2(progfd, mapfd, attach_type);
tools/bpf/bpftool/prog.c:1455:		      enum bpf_attach_type *expected_attach_type)
tools/bpf/bpftool/prog.c:1460:	ret = libbpf_prog_type_by_name(name, prog_type, expected_attach_type);
tools/bpf/bpftool/prog.c:1466:	ret = libbpf_prog_type_by_name(name, prog_type, expected_attach_type);
tools/bpf/bpftool/prog.c:1526:	enum bpf_attach_type expected_attach_type;
tools/bpf/bpftool/prog.c:1559:						       &expected_attach_type);
tools/bpf/bpftool/prog.c:1573:							    &expected_attach_type);
tools/bpf/bpftool/prog.c:1710:						    &expected_attach_type);
tools/bpf/bpftool/prog.c:1723:		bpf_program__set_expected_attach_type(pos, expected_attach_type);
tools/bpf/bpftool/prog.c:2476:		"       %1$s %2$s attach PROG ATTACH_TYPE [MAP]\n"
tools/bpf/bpftool/prog.c:2477:		"       %1$s %2$s detach PROG ATTACH_TYPE [MAP]\n"
tools/bpf/bpftool/prog.c:2502:		"       ATTACH_TYPE := { sk_msg_verdict | sk_skb_verdict | sk_skb_stream_verdict |\n"
tools/include/uapi/linux/bpf.h:110:	__u32	attach_type;		/* program attach type (enum bpf_attach_type) */
tools/include/uapi/linux/bpf.h:302: *		*attach_type* hook.
tools/include/uapi/linux/bpf.h:304: *		The *attach_type* specifies the eBPF attachment point to
tools/include/uapi/linux/bpf.h:305: *		attach the program to, and must be one of *bpf_attach_type*
tools/include/uapi/linux/bpf.h:310: *		or sock_ops type corresponding to the specified *attach_type*.
tools/include/uapi/linux/bpf.h:348: *		hook specified by *attach_type*. The program must have been
tools/include/uapi/linux/bpf.h:458: *		specified *attach_type* hook.
tools/include/uapi/linux/bpf.h:780: *		*attach_type* hook and return a file descriptor handle for
tools/include/uapi/linux/bpf.h:1061:enum bpf_attach_type {
tools/include/uapi/linux/bpf.h:1120:	__MAX_BPF_ATTACH_TYPE
tools/include/uapi/linux/bpf.h:1123:#define MAX_BPF_ATTACH_TYPE __MAX_BPF_ATTACH_TYPE
tools/include/uapi/linux/bpf.h:1548:		__u32		expected_attach_type;
tools/include/uapi/linux/bpf.h:1597:		__u32		attach_type;
tools/include/uapi/linux/bpf.h:1654:		__u32		attach_type;
tools/include/uapi/linux/bpf.h:1722:		__u32		attach_type;	/* attach type */
tools/include/uapi/linux/bpf.h:6631:			__u32 attach_type;
tools/include/uapi/linux/bpf.h:6637:			__u32 attach_type;
tools/include/uapi/linux/bpf.h:6665:			__u32 attach_type;
tools/include/uapi/linux/bpf.h:6730:			__u32 attach_type;
tools/include/uapi/linux/bpf.h:6734:			__u32 attach_type;
tools/include/uapi/linux/bpf.h:6738:			__u32 attach_type;
tools/lib/bpf/libbpf_probes.c:118:		opts.expected_attach_type = BPF_CGROUP_INET4_CONNECT;
tools/lib/bpf/libbpf_probes.c:121:		opts.expected_attach_type = BPF_CGROUP_GETSOCKOPT;
tools/lib/bpf/libbpf_probes.c:124:		opts.expected_attach_type = BPF_SK_LOOKUP;
tools/lib/bpf/libbpf_probes.c:130:		opts.expected_attach_type = BPF_LIRC_MODE2;
tools/lib/bpf/libbpf_probes.c:138:			opts.expected_attach_type = BPF_TRACE_FENTRY;
tools/lib/bpf/libbpf_probes.c:140:			opts.expected_attach_type = BPF_MODIFY_RETURN;
tools/lib/bpf/libbpf_probes.c:185:		opts.expected_attach_type = BPF_NETFILTER;
tools/lib/bpf/bpf.c:264:	attr.expected_attach_type = OPTS_GET(opts, expected_attach_type, 0);
tools/lib/bpf/bpf.c:629:int bpf_prog_attach(int prog_fd, int target_fd, enum bpf_attach_type type,
tools/lib/bpf/bpf.c:639:int bpf_prog_attach_opts(int prog_fd, int target, enum bpf_attach_type type,
tools/lib/bpf/bpf.c:661:	attr.attach_type	= type;
tools/lib/bpf/bpf.c:677:int bpf_prog_detach_opts(int prog_fd, int target, enum bpf_attach_type type,
tools/lib/bpf/bpf.c:699:	attr.attach_type	= type;
tools/lib/bpf/bpf.c:714:int bpf_prog_detach(int target_fd, enum bpf_attach_type type)
tools/lib/bpf/bpf.c:719:int bpf_prog_detach2(int prog_fd, int target_fd, enum bpf_attach_type type)
tools/lib/bpf/bpf.c:725:		    enum bpf_attach_type attach_type,
tools/lib/bpf/bpf.c:750:	attr.link_create.attach_type = attach_type;
tools/lib/bpf/bpf.c:758:	switch (attach_type) {
tools/lib/bpf/bpf.c:867:	switch (attach_type) {
tools/lib/bpf/bpf.c:931:int bpf_prog_query_opts(int target, enum bpf_attach_type type,
tools/lib/bpf/bpf.c:943:	attr.query.attach_type		= type;
tools/lib/bpf/bpf.c:960:int bpf_prog_query(int target_fd, enum bpf_attach_type type, __u32 query_flags,
tools/lib/bpf/bpf.h:77:	enum bpf_attach_type expected_attach_type;
tools/lib/bpf/bpf.h:331:			       enum bpf_attach_type type, unsigned int flags);
tools/lib/bpf/bpf.h:332:LIBBPF_API int bpf_prog_detach(int attachable_fd, enum bpf_attach_type type);
tools/lib/bpf/bpf.h:334:				enum bpf_attach_type type);
tools/lib/bpf/bpf.h:373:				    enum bpf_attach_type type,
tools/lib/bpf/bpf.h:389:				    enum bpf_attach_type type,
tools/lib/bpf/bpf.h:444:			       enum bpf_attach_type attach_type,
tools/lib/bpf/bpf.h:614:LIBBPF_API int bpf_prog_query_opts(int target, enum bpf_attach_type type,
tools/lib/bpf/bpf.h:616:LIBBPF_API int bpf_prog_query(int target_fd, enum bpf_attach_type type,
tools/lib/bpf/bpf_gen_internal.h:69:void bpf_gen__record_attach_target(struct bpf_gen *gen, const char *name, enum bpf_attach_type type);
tools/lib/bpf/features.c:224:static int probe_kern_exp_attach_type(int token_fd)
tools/lib/bpf/features.c:227:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/lib/bpf/features.c:239:	 * to see if kernel supports expected_attach_type field for
tools/lib/bpf/features.c:366:		.expected_attach_type = BPF_TRACE_UPROBE_MULTI,
tools/lib/bpf/features.c:539:	[FEAT_EXP_ATTACH_TYPE] = {
tools/lib/bpf/features.c:540:		"BPF_PROG_LOAD expected_attach_type attribute",
tools/lib/bpf/features.c:541:		probe_kern_exp_attach_type,
tools/lib/bpf/gen_loader.c:561:				   enum bpf_attach_type type)
tools/lib/bpf/gen_loader.c:1020:	attr.expected_attach_type = tgt_endian(load_attr->expected_attach_type);
tools/lib/bpf/libbpf.c:78:static const char * const attach_type_name[] = {
tools/lib/bpf/libbpf.c:391:	/* expected_attach_type is optional, if kernel doesn't support that */
tools/lib/bpf/libbpf.c:394:	 * libbpf_attach_type_by_name(), not used by libbpf itself at all.
tools/lib/bpf/libbpf.c:416:	enum bpf_attach_type expected_attach_type;
tools/lib/bpf/libbpf.c:481:	enum bpf_attach_type expected_attach_type;
tools/lib/bpf/libbpf.c:1279:				prog->expected_attach_type = kern_member_idx;
tools/lib/bpf/libbpf.c:1293:			if (prog->expected_attach_type != kern_member_idx) {
tools/lib/bpf/libbpf.c:1294:				pr_warn("struct_ops init_kern %s func ptr %s: invalid reuse of prog %s in sec %s with type %u: expected_attach_type %u != kern_member_idx %u\n",
tools/lib/bpf/libbpf.c:1296:					prog->expected_attach_type, kern_member_idx);
tools/lib/bpf/libbpf.c:7389:	/* old kernels might not support specifying expected_attach_type */
tools/lib/bpf/libbpf.c:7390:	if ((def & SEC_EXP_ATTACH_OPT) && !kernel_supports(prog->obj, FEAT_EXP_ATTACH_TYPE))
tools/lib/bpf/libbpf.c:7391:		opts->expected_attach_type = 0;
tools/lib/bpf/libbpf.c:7401:		/* for BPF_TRACE_UPROBE_MULTI, user might want to query expected_attach_type
tools/lib/bpf/libbpf.c:7402:		 * in prog, and expected_attach_type we set in kernel is from opts, so we
tools/lib/bpf/libbpf.c:7405:		prog->expected_attach_type = BPF_TRACE_UPROBE_MULTI;
tools/lib/bpf/libbpf.c:7406:		opts->expected_attach_type = BPF_TRACE_UPROBE_MULTI;
tools/lib/bpf/libbpf.c:7496:	load_attr.expected_attach_type = prog->expected_attach_type;
tools/lib/bpf/libbpf.c:7935:		prog->expected_attach_type = prog->sec_def->expected_attach_type;
tools/lib/bpf/libbpf.c:9315:__alias(bpf_program__expected_attach_type)
tools/lib/bpf/libbpf.c:9316:enum bpf_attach_type bpf_program__get_expected_attach_type(const struct bpf_program *prog);
tools/lib/bpf/libbpf.c:9318:enum bpf_attach_type bpf_program__expected_attach_type(const struct bpf_program *prog)
tools/lib/bpf/libbpf.c:9320:	return prog->expected_attach_type;
tools/lib/bpf/libbpf.c:9323:int bpf_program__set_expected_attach_type(struct bpf_program *prog,
tools/lib/bpf/libbpf.c:9324:					   enum bpf_attach_type type)
tools/lib/bpf/libbpf.c:9329:	prog->expected_attach_type = type;
tools/lib/bpf/libbpf.c:9384:	.expected_attach_type = atype,					    \
tools/lib/bpf/libbpf.c:9511:				 enum bpf_attach_type exp_attach_type,
tools/lib/bpf/libbpf.c:9542:	sec_def->expected_attach_type = exp_attach_type;
tools/lib/bpf/libbpf.c:9653:static char *libbpf_get_type_names(bool attach_type)
tools/lib/bpf/libbpf.c:9667:		if (attach_type) {
tools/lib/bpf/libbpf.c:9687:			     enum bpf_attach_type *expected_attach_type)
tools/lib/bpf/libbpf.c:9698:		*expected_attach_type = sec_def->expected_attach_type;
tools/lib/bpf/libbpf.c:9712:const char *libbpf_bpf_attach_type_str(enum bpf_attach_type t)
tools/lib/bpf/libbpf.c:9714:	if (t < 0 || t >= ARRAY_SIZE(attach_type_name))
tools/lib/bpf/libbpf.c:9717:	return attach_type_name[t];
tools/lib/bpf/libbpf.c:9879:void btf_get_kernel_prefix_kind(enum bpf_attach_type attach_type,
tools/lib/bpf/libbpf.c:9882:	switch (attach_type) {
tools/lib/bpf/libbpf.c:9920:				     enum bpf_attach_type attach_type)
tools/lib/bpf/libbpf.c:9925:	btf_get_kernel_prefix_kind(attach_type, &prefix, &kind);
tools/lib/bpf/libbpf.c:9930:			       enum bpf_attach_type attach_type)
tools/lib/bpf/libbpf.c:9942:	err = find_attach_btf_id(btf, name, attach_type);
tools/lib/bpf/libbpf.c:9987:			      enum bpf_attach_type attach_type,
tools/lib/bpf/libbpf.c:10003:					 attach_type);
tools/lib/bpf/libbpf.c:10025:					 attach_type);
tools/lib/bpf/libbpf.c:10043:	enum bpf_attach_type attach_type = prog->expected_attach_type;
tools/lib/bpf/libbpf.c:10066:		bpf_gen__record_attach_target(prog->obj->gen_loader, attach_name, attach_type);
tools/lib/bpf/libbpf.c:10071:					 attach_type, btf_obj_fd,
tools/lib/bpf/libbpf.c:10082:int libbpf_attach_type_by_name(const char *name,
tools/lib/bpf/libbpf.c:10083:			       enum bpf_attach_type *attach_type)
tools/lib/bpf/libbpf.c:10108:	*attach_type = sec_def->expected_attach_type;
tools/lib/bpf/libbpf.c:11521:	enum bpf_attach_type attach_type;
tools/lib/bpf/libbpf.c:11571:	attach_type = session ? BPF_TRACE_KPROBE_SESSION : BPF_TRACE_KPROBE_MULTI;
tools/lib/bpf/libbpf.c:11586:	link_fd = bpf_link_create(prog_fd, 0, attach_type, &lopts);
tools/lib/bpf/libbpf.c:11985:	enum bpf_attach_type attach_type;
tools/lib/bpf/libbpf.c:12065:	attach_type = session ? BPF_TRACE_UPROBE_SESSION : BPF_TRACE_UPROBE_MULTI;
tools/lib/bpf/libbpf.c:12086:	link_fd = bpf_link_create(prog_fd, 0, attach_type, &lopts);
tools/lib/bpf/libbpf.c:12626:	pfd = bpf_link_create(prog_fd, 0, bpf_program__expected_attach_type(prog), &link_opts);
tools/lib/bpf/libbpf.c:12671:	enum bpf_attach_type attach_type;
tools/lib/bpf/libbpf.c:12686:	attach_type = bpf_program__expected_attach_type(prog);
tools/lib/bpf/libbpf.c:12687:	link_fd = bpf_link_create(prog_fd, target_fd, attach_type, opts);
tools/lib/bpf/libbpf.c:13647:					 prog->expected_attach_type,
tools/lib/bpf/libbpf.h:55: * @brief **libbpf_bpf_attach_type_str()** converts the provided attach type
tools/lib/bpf/libbpf.h:59: * returned for unknown **bpf_attach_type** values.
tools/lib/bpf/libbpf.h:61:LIBBPF_API const char *libbpf_bpf_attach_type_str(enum bpf_attach_type t);
tools/lib/bpf/libbpf.h:315:			 enum bpf_attach_type *expected_attach_type);
tools/lib/bpf/libbpf.h:316:LIBBPF_API int libbpf_attach_type_by_name(const char *name,
tools/lib/bpf/libbpf.h:317:					  enum bpf_attach_type *attach_type);
tools/lib/bpf/libbpf.h:319:					  enum bpf_attach_type attach_type);
tools/lib/bpf/libbpf.h:897:LIBBPF_API enum bpf_attach_type
tools/lib/bpf/libbpf.h:898:bpf_program__expected_attach_type(const struct bpf_program *prog);
tools/lib/bpf/libbpf.h:901: * @brief **bpf_program__set_expected_attach_type()** sets the
tools/lib/bpf/libbpf.h:913:bpf_program__set_expected_attach_type(struct bpf_program *prog,
tools/lib/bpf/libbpf.h:914:				      enum bpf_attach_type type);
tools/lib/bpf/libbpf.h:1864: * @param exp_attach_type Expected BPF attach type associated with specified section
tools/lib/bpf/libbpf.h:1898:					    enum bpf_attach_type exp_attach_type,
tools/lib/bpf/libbpf.map:43:		bpf_program__set_expected_attach_type;
tools/lib/bpf/libbpf.map:62:		libbpf_attach_type_by_name;
tools/lib/bpf/libbpf.map:117:		bpf_program__get_expected_attach_type;
tools/lib/bpf/libbpf.map:318:		bpf_program__expected_attach_type;
tools/lib/bpf/libbpf.map:363:		libbpf_bpf_attach_type_str;
tools/lib/bpf/libbpf_internal.h:353:	/* kernel support for expected_attach_type in BPF_PROG_LOAD */
tools/lib/bpf/libbpf_internal.h:354:	FEAT_EXP_ATTACH_TYPE,
tools/lib/bpf/libbpf_internal.h:414:void btf_get_kernel_prefix_kind(enum bpf_attach_type attach_type,
tools/lib/bpf/libbpf_legacy.h:131:LIBBPF_API enum bpf_attach_type bpf_program__get_expected_attach_type(const struct bpf_program *prog);
tools/lib/bpf/skel_internal.h:290:				   enum bpf_attach_type attach_type)
tools/lib/bpf/skel_internal.h:298:	attr.link_create.attach_type = attach_type;
tools/testing/selftests/bpf/test_maps.c:791:	err = bpf_prog_attach(-1, fd, __MAX_BPF_ATTACH_TYPE, 0);
tools/testing/selftests/bpf/test_maps.c:815:	err = bpf_prog_detach(fd, __MAX_BPF_ATTACH_TYPE);
tools/testing/selftests/bpf/test_maps.c:919:			      __MAX_BPF_ATTACH_TYPE, 0);
tools/testing/selftests/bpf/test_maps.c:1099:	err = bpf_prog_detach2(parse_prog, map_fd_rx, __MAX_BPF_ATTACH_TYPE);
tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c:49:		       enum bpf_prog_type attach_type,
tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c:60:	err = check_load(file, attach_type);
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:96:	key.attach_type = BPF_CGROUP_INET_EGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:196:	key.attach_type = BPF_CGROUP_INET_EGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:201:	key.attach_type = BPF_CGROUP_INET_INGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:207:	key.attach_type = BPF_CGROUP_INET_EGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:210:	key.attach_type = BPF_CGROUP_INET_INGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:238:	key.attach_type = BPF_CGROUP_INET_EGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:243:	key.attach_type = BPF_CGROUP_INET_INGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:249:	key.attach_type = BPF_CGROUP_INET_EGRESS;
tools/testing/selftests/bpf/prog_tests/cg_storage_multi.c:254:	key.attach_type = BPF_CGROUP_INET_INGRESS;
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:35:	enum bpf_attach_type expected_attach_type;
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:167:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:173:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:179:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:185:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:197:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:202:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:207:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:635:	enum bpf_attach_type expected_attach_type;
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:664:	opts.expected_attach_type = pinfo->expected_attach_type;
tools/testing/selftests/bpf/prog_tests/ctx_rewrite.c:732:	pinfo.expected_attach_type = test->expected_attach_type;
tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c:142:		ASSERT_EQ(link_info.tracing.attach_type,
tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c:143:			  bpf_program__expected_attach_type(prog[i]),
tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c:144:			  "link_attach_type");
tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c:462:		    .expected_attach_type = BPF_TRACE_FENTRY,
tools/testing/selftests/bpf/prog_tests/fexit_stress.c:26:		.expected_attach_type = BPF_TRACE_FEXIT,
tools/testing/selftests/bpf/prog_tests/fexit_stress.c:32:					 trace_opts.expected_attach_type);
tools/testing/selftests/bpf/prog_tests/flow_dissector_reattach.c:512:	CHECK_FAIL(info.netns.attach_type != BPF_FLOW_DISSECTOR);
tools/testing/selftests/bpf/prog_tests/flow_dissector_reattach.c:536:	CHECK_FAIL(info.netns.attach_type != BPF_FLOW_DISSECTOR);
tools/testing/selftests/bpf/prog_tests/flow_dissector_reattach.c:561:	CHECK_FAIL(info.netns.attach_type != BPF_FLOW_DISSECTOR);
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:18: * Test case to check that all bpf_attach_type variants are covered by
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:19: * libbpf_bpf_attach_type_str.
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:21:static void test_libbpf_bpf_attach_type_str(void)
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:32:	/* find enum bpf_attach_type and enumerate each value */
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:33:	id = btf__find_by_name_kind(btf, "bpf_attach_type", BTF_KIND_ENUM);
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:34:	if (!ASSERT_GT(id, 0, "bpf_attach_type_id"))
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:40:		enum bpf_attach_type attach_type = (enum bpf_attach_type)e->val;
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:41:		const char *attach_type_name;
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:42:		const char *attach_type_str;
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:45:		if (attach_type == __MAX_BPF_ATTACH_TYPE)
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:48:		attach_type_name = btf__str_by_offset(btf, e->name_off);
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:49:		attach_type_str = libbpf_bpf_attach_type_str(attach_type);
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:50:		ASSERT_OK_PTR(attach_type_str, attach_type_name);
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:52:		snprintf(buf, sizeof(buf), "BPF_%s", attach_type_str);
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:55:		ASSERT_STREQ(buf, attach_type_name, "exp_str_value");
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:214:	if (test__start_subtest("bpf_attach_type_str"))
tools/testing/selftests/bpf/prog_tests/libbpf_str.c:215:		test_libbpf_bpf_attach_type_str();
tools/testing/selftests/bpf/prog_tests/module_fentry_shadow.c:71:		.expected_attach_type = BPF_TRACE_FENTRY,
tools/testing/selftests/bpf/prog_tests/section_names.c:12:		enum bpf_attach_type expected_attach_type;
tools/testing/selftests/bpf/prog_tests/section_names.c:16:		enum bpf_attach_type attach_type;
tools/testing/selftests/bpf/prog_tests/section_names.c:210:	enum bpf_attach_type expected_attach_type;
tools/testing/selftests/bpf/prog_tests/section_names.c:215:				      &expected_attach_type);
tools/testing/selftests/bpf/prog_tests/section_names.c:227:	CHECK(expected_attach_type != test->expected_load.expected_attach_type,
tools/testing/selftests/bpf/prog_tests/section_names.c:228:	      "check_attach_type", "prog: unexpected expected_attach_type=%d for %s\n",
tools/testing/selftests/bpf/prog_tests/section_names.c:229:	      expected_attach_type, test->sec_name);
tools/testing/selftests/bpf/prog_tests/section_names.c:232:static void test_attach_type_by_name(const struct sec_name_test *test)
tools/testing/selftests/bpf/prog_tests/section_names.c:234:	enum bpf_attach_type attach_type;
tools/testing/selftests/bpf/prog_tests/section_names.c:237:	rc = libbpf_attach_type_by_name(test->sec_name, &attach_type);
tools/testing/selftests/bpf/prog_tests/section_names.c:245:	CHECK(attach_type != test->expected_attach.attach_type,
tools/testing/selftests/bpf/prog_tests/section_names.c:246:	      "check_attach_type", "attach: unexpected attach_type=%d for %s\n",
tools/testing/selftests/bpf/prog_tests/section_names.c:247:	      attach_type, test->sec_name);
tools/testing/selftests/bpf/prog_tests/section_names.c:258:		test_attach_type_by_name(test);
tools/testing/selftests/bpf/prog_tests/sock_addr.c:63:			 enum bpf_attach_type attach_type,
tools/testing/selftests/bpf/prog_tests/sock_addr.c:354:	enum bpf_attach_type attach_type;
tools/testing/selftests/bpf/prog_tests/sock_addr.c:378:				  enum bpf_attach_type attach_type, \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:390:	if (bpf_prog_attach(prog_fd, cgroup_fd, attach_type, \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:399:		bpf_prog_detach(cgroup_fd, attach_type); \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:410:			      enum bpf_attach_type attach_type, \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:416:	if (!ASSERT_OK(bpf_program__set_expected_attach_type(skel->progs.prog_name, \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:417:							     attach_type), \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:418:		       "set_expected_attach_type")) \
tools/testing/selftests/bpf/prog_tests/sock_addr.c:2612:		skel = test->loadfn(cgroup_fd, test->attach_type,
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:363:static void test_sockmap_skb_verdict_attach(enum bpf_attach_type first,
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:364:					    enum bpf_attach_type second)
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:438:static void test_sockmap_progs_query(enum bpf_attach_type attach_type)
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:452:	if (attach_type == BPF_SK_MSG_VERDICT)
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:457:	err = bpf_prog_query(map_fd, attach_type, 0 /* query flags */,
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:463:	err = bpf_prog_attach(verdict_fd, map_fd, attach_type, 0);
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:468:	err = bpf_prog_query(map_fd, attach_type, 0 /* query flags */,
tools/testing/selftests/bpf/prog_tests/sockmap_basic.c:476:	bpf_prog_detach2(verdict_fd, map_fd, attach_type);
tools/testing/selftests/bpf/prog_tests/sockmap_listen.c:312:		enum bpf_attach_type atype;
tools/testing/selftests/bpf/prog_tests/sockopt.c:28:	enum bpf_attach_type		attach_type;
tools/testing/selftests/bpf/prog_tests/sockopt.c:29:	enum bpf_attach_type		expected_attach_type;
tools/testing/selftests/bpf/prog_tests/sockopt.c:49:		.descr = "getsockopt: no expected_attach_type",
tools/testing/selftests/bpf/prog_tests/sockopt.c:56:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:57:		.expected_attach_type = 0,
tools/testing/selftests/bpf/prog_tests/sockopt.c:61:		.descr = "getsockopt: wrong expected_attach_type",
tools/testing/selftests/bpf/prog_tests/sockopt.c:68:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:69:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:79:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:80:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:100:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:101:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:124:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:125:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:150:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:151:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:166:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:167:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:193:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:194:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:211:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:212:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:227:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:228:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:254:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:255:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:278:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:279:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:319:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:320:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:344:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:345:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:361:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:362:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:375:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:376:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:410:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:411:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:423:		.descr = "setsockopt: no expected_attach_type",
tools/testing/selftests/bpf/prog_tests/sockopt.c:430:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:431:		.expected_attach_type = 0,
tools/testing/selftests/bpf/prog_tests/sockopt.c:435:		.descr = "setsockopt: wrong expected_attach_type",
tools/testing/selftests/bpf/prog_tests/sockopt.c:442:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:443:		.expected_attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:453:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:454:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:475:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:476:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:498:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:499:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:524:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:525:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:543:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:544:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:579:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:580:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:598:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:599:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:634:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:635:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:651:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:652:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:668:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:669:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:686:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:687:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:720:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:721:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:763:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:764:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:789:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:790:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:805:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:806:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:819:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:820:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:833:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:834:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:870:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:871:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:916:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:917:		.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:944:		.attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:945:		.expected_attach_type = 0,
tools/testing/selftests/bpf/prog_tests/sockopt.c:958:		.attach_type = BPF_CGROUP_GETSOCKOPT,
tools/testing/selftests/bpf/prog_tests/sockopt.c:959:		.expected_attach_type = 0,
tools/testing/selftests/bpf/prog_tests/sockopt.c:966:		     enum bpf_attach_type expected_attach_type)
tools/testing/selftests/bpf/prog_tests/sockopt.c:969:		.expected_attach_type = expected_attach_type,
tools/testing/selftests/bpf/prog_tests/sockopt.c:1082:	prog_fd = load_prog(test->insns, prog_type, test->expected_attach_type);
tools/testing/selftests/bpf/prog_tests/sockopt.c:1092:		err = bpf_link_create(prog_fd, cgroup_fd, test->attach_type, NULL);
tools/testing/selftests/bpf/prog_tests/sockopt.c:1095:		err = bpf_prog_attach(prog_fd, cgroup_fd, test->attach_type, 0);
tools/testing/selftests/bpf/prog_tests/sockopt.c:1191:		bpf_prog_detach2(prog_fd, cgroup_fd, test->attach_type);
tools/testing/selftests/bpf/prog_tests/tc_links.c:130:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:131:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:132:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:133:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:134:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:135:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:136:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:137:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:284:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:285:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:286:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:287:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:288:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:289:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:290:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:291:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:437:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:438:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:439:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:440:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:538:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:539:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:540:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:541:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:643:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:644:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:645:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:646:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:647:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:648:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:868:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:869:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:870:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:871:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1182:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1183:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1184:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1185:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1186:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1187:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1188:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1189:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1338:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1339:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1340:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1341:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1342:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1343:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1344:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1345:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1496:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1497:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1498:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1499:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1500:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1501:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1502:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1503:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1591:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1592:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1593:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc5, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1594:		  0, "tc5_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1595:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc6, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1596:		  0, "tc6_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1704:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1705:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1706:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1707:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1869:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1870:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1871:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1872:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1873:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1874:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_links.c:1875:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_links.c:1876:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:196:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:197:		  BPF_NETKIT_PRIMARY), 0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:198:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:199:		  BPF_NETKIT_PEER), 0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:311:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:312:		  target), 0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:313:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:314:		  target), 0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:558:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:559:		  BPF_NETKIT_PRIMARY), 0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:560:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:561:		  BPF_NETKIT_PEER), 0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:562:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:563:		  BPF_NETKIT_PRIMARY), 0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:667:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:668:		  BPF_NETKIT_PRIMARY), 0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:748:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:749:		  BPF_NETKIT_PRIMARY), 0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:750:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc7,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:751:		  BPF_TCX_INGRESS), 0, "tc7_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:818:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc8,
tools/testing/selftests/bpf/prog_tests/tc_netkit.c:819:		  BPF_NETKIT_PRIMARY), 0, "tc8_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1413:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1414:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1415:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1416:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1417:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc3, target),
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1418:		  0, "tc3_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1419:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc4, target),
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1420:		  0, "tc4_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1586:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc1, target),
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1587:		  0, "tc1_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1588:	ASSERT_EQ(bpf_program__set_expected_attach_type(skel->progs.tc2, target),
tools/testing/selftests/bpf/prog_tests/tc_opts.c:1589:		  0, "tc2_attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2558:	attr.query.attach_type = target;
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2569:	ASSERT_EQ(attr.query.attach_type, target, "attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2587:	ASSERT_EQ(attr.query.attach_type, target, "attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2601:	attr.query.attach_type = target;
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2616:	ASSERT_EQ(attr.query.attach_type, target, "attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2630:	attr.query.attach_type = target;
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2645:	ASSERT_EQ(attr.query.attach_type, target, "attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2659:	attr.query.attach_type = target;
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2673:	ASSERT_EQ(attr.query.attach_type, target, "attach_type");
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2687:	attr.query.attach_type = target;
tools/testing/selftests/bpf/prog_tests/tc_opts.c:2701:	ASSERT_EQ(attr.query.attach_type, target, "attach_type");
tools/testing/selftests/bpf/prog_tests/xdp_bpf2bpf.c:133:	bpf_program__set_expected_attach_type(prog, BPF_TRACE_FENTRY);
tools/testing/selftests/bpf/prog_tests/xdp_bpf2bpf.c:137:	bpf_program__set_expected_attach_type(prog, BPF_TRACE_FEXIT);
tools/testing/selftests/bpf/prog_tests/sock_create.c:17:	enum bpf_attach_type		attach_type;
tools/testing/selftests/bpf/prog_tests/sock_create.c:18:	enum bpf_attach_type		expected_attach_type;
tools/testing/selftests/bpf/prog_tests/sock_create.c:40:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:41:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:61:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:62:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:92:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:93:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:123:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:124:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:144:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:145:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:165:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:166:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:198:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:199:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:231:		.expected_attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:232:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:241:		.descr = "load w/o expected_attach_type (compat mode)",
tools/testing/selftests/bpf/prog_tests/sock_create.c:247:		.expected_attach_type = 0,
tools/testing/selftests/bpf/prog_tests/sock_create.c:248:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_create.c:256:		     enum bpf_attach_type expected_attach_type)
tools/testing/selftests/bpf/prog_tests/sock_create.c:259:		    .expected_attach_type = expected_attach_type,
tools/testing/selftests/bpf/prog_tests/sock_create.c:285:	prog_fd = load_prog(test->insns, test->expected_attach_type);
tools/testing/selftests/bpf/prog_tests/sock_create.c:291:	err = bpf_prog_attach(prog_fd, cgroup_fd, test->attach_type, 0);
tools/testing/selftests/bpf/prog_tests/sock_create.c:326:	bpf_prog_detach2(prog_fd, cgroup_fd, test->attach_type);
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:14:	enum bpf_attach_type		attach_type;
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:15:	enum bpf_attach_type		expected_attach_type;
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:39:		.expected_attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:40:		.attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:49:		.expected_attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:50:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:59:		.expected_attach_type = 0,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:60:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:69:		.expected_attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:70:		.attach_type = BPF_CGROUP_INET_SOCK_CREATE,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:79:		.expected_attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:80:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:92:		.expected_attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:93:		.attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:121:		.expected_attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:122:		.attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:151:		.expected_attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:152:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:181:		.expected_attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:182:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:212:		.expected_attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:213:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:243:		.expected_attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:244:		.attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:258:		.expected_attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:259:		.attach_type = BPF_CGROUP_INET4_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:271:		.expected_attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:272:		.attach_type = BPF_CGROUP_INET6_POST_BIND,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:281:		     enum bpf_attach_type expected_attach_type)
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:284:		    .expected_attach_type = expected_attach_type,
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:376:	prog_fd = load_prog(test->insns, test->expected_attach_type);
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:380:	err = bpf_prog_attach(prog_fd, cgroup_fd, test->attach_type, 0);
tools/testing/selftests/bpf/prog_tests/sock_post_bind.c:397:		bpf_prog_detach(cgroup_fd, test->attach_type);
tools/testing/selftests/bpf/prog_tests/token.c:665:	prog_opts.expected_attach_type = BPF_XDP;
tools/testing/selftests/bpf/progs/test_xdp_devmap_helpers.c:2:/* fails to load without expected_attach_type = BPF_XDP_DEVMAP
tools/testing/selftests/bpf/test_bpftool_synctypes.py:355:    def get_attach_types(self):
tools/testing/selftests/bpf/test_bpftool_synctypes.py:356:        types = self.get_types_from_array('attach_types')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:360:        return self.get_help_list('ATTACH_TYPE')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:378:        return self.get_help_list('ATTACH_TYPE')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:398:        self.attach_types = {}
tools/testing/selftests/bpf/test_bpftool_synctypes.py:407:    def get_attach_type_map(self):
tools/testing/selftests/bpf/test_bpftool_synctypes.py:408:        if not self.attach_types:
tools/testing/selftests/bpf/test_bpftool_synctypes.py:409:          names = self.get_enum('bpf_attach_type')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:410:          self.attach_types = self.make_enum_map(names, 'BPF_')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:411:        return self.attach_types
tools/testing/selftests/bpf/test_bpftool_synctypes.py:413:    def get_cgroup_attach_type_map(self):
tools/testing/selftests/bpf/test_bpftool_synctypes.py:414:        if not self.attach_types:
tools/testing/selftests/bpf/test_bpftool_synctypes.py:415:            self.get_attach_type_map()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:416:        return {name: text for name, text in self.attach_types.items()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:434:    def get_attach_types(self):
tools/testing/selftests/bpf/test_bpftool_synctypes.py:435:        return self.get_rst_list('ATTACH_TYPE')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:452:    def get_attach_types(self):
tools/testing/selftests/bpf/test_bpftool_synctypes.py:453:        return self.get_rst_list('ATTACH_TYPE')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:471:    def get_prog_attach_types(self):
tools/testing/selftests/bpf/test_bpftool_synctypes.py:472:        return self.get_bashcomp_list('BPFTOOL_PROG_ATTACH_TYPES')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:540:    source_prog_attach_types = set(prog_info.get_attach_types().values())
tools/testing/selftests/bpf/test_bpftool_synctypes.py:542:    help_prog_attach_types = prog_info.get_prog_attach_help()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:548:    man_prog_attach_types = man_prog_info.get_attach_types()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:553:    bashcomp_prog_attach_types = bashcomp_info.get_prog_attach_types()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:556:    verify(source_prog_attach_types, help_prog_attach_types,
tools/testing/selftests/bpf/test_bpftool_synctypes.py:557:            f'Comparing {ProgFileExtractor.filename} (bpf_attach_type) and {ProgFileExtractor.filename} (do_help() ATTACH_TYPE):')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:558:    verify(source_prog_attach_types, man_prog_attach_types,
tools/testing/selftests/bpf/test_bpftool_synctypes.py:559:            f'Comparing {ProgFileExtractor.filename} (bpf_attach_type) and {ManProgExtractor.filename} (ATTACH_TYPE):')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:562:    verify(source_prog_attach_types, bashcomp_prog_attach_types,
tools/testing/selftests/bpf/test_bpftool_synctypes.py:563:            f'Comparing {ProgFileExtractor.filename} (bpf_attach_type) and {BashcompExtractor.filename} (BPFTOOL_PROG_ATTACH_TYPES):')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:566:    source_cgroup_attach_types = set(bpf_info.get_cgroup_attach_type_map().values())
tools/testing/selftests/bpf/test_bpftool_synctypes.py:570:    help_cgroup_attach_types = cgroup_info.get_prog_attach_help()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:576:    man_cgroup_attach_types = man_cgroup_info.get_attach_types()
tools/testing/selftests/bpf/test_bpftool_synctypes.py:579:    verify(source_cgroup_attach_types, help_cgroup_attach_types,
tools/testing/selftests/bpf/test_bpftool_synctypes.py:580:            f'Comparing {BpfHeaderExtractor.filename} (bpf_attach_type) and {CgroupFileExtractor.filename} (do_help() ATTACH_TYPE):')
tools/testing/selftests/bpf/test_bpftool_synctypes.py:581:    verify(source_cgroup_attach_types, man_cgroup_attach_types,
tools/testing/selftests/bpf/test_bpftool_synctypes.py:582:            f'Comparing {BpfHeaderExtractor.filename} (bpf_attach_type) and {ManCgroupExtractor.filename} (ATTACH_TYPE):')
tools/testing/selftests/bpf/test_sysctl.c:32:	enum bpf_attach_type attach_type;
tools/testing/selftests/bpf/test_sysctl.c:48:		.descr = "sysctl wrong attach_type",
tools/testing/selftests/bpf/test_sysctl.c:53:		.attach_type = 0,
tools/testing/selftests/bpf/test_sysctl.c:64:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:75:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:96:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:117:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:140:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:156:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:177:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:204:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:220:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:262:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:304:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:359:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:408:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:450:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:486:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:525:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:564:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:599:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:636:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:670:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:706:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:756:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:795:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:830:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:864:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:909:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:979:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1012:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1056:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1097:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1138:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1180:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1225:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1270:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1321:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1368:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1376:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1385:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1393:		.attach_type = BPF_CGROUP_SYSCTL,
tools/testing/selftests/bpf/test_sysctl.c:1545:	enum bpf_attach_type atype = test->attach_type;
tools/testing/selftests/bpf/test_verifier.c:159:	enum bpf_attach_type expected_attach_type;
tools/testing/selftests/bpf/test_verifier.c:1561:	opts.expected_attach_type = test->expected_attach_type;
tools/testing/selftests/bpf/test_verifier.c:1577:						opts.expected_attach_type);
tools/testing/selftests/bpf/verifier/atomic_fetch_add.c:102:	.expected_attach_type = BPF_TRACE_FENTRY,
tools/testing/selftests/bpf/verifier/bpf_st_mem.c:13:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/bpf_st_mem.c:35:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/bpf_st_mem.c:65:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/bpf_st_mem.c:93:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:259:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:274:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:287:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:301:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:314:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:328:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:342:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:355:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:369:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:383:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:398:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:411:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:424:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:438:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:450:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:463:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:478:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:491:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:504:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:517:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/ctx_sk_lookup.c:531:	.expected_attach_type = BPF_SK_LOOKUP,
tools/testing/selftests/bpf/verifier/event_output.c:115:	.expected_attach_type = BPF_CGROUP_SETSOCKOPT,
tools/testing/selftests/bpf/verifier/sleepable.c:8:	.expected_attach_type = BPF_TRACE_FENTRY,
tools/testing/selftests/bpf/verifier/sleepable.c:21:	.expected_attach_type = BPF_TRACE_FENTRY,
tools/testing/selftests/bpf/verifier/sleepable.c:34:	.expected_attach_type = BPF_MODIFY_RETURN,
tools/testing/selftests/bpf/verifier/sleepable.c:47:	.expected_attach_type = BPF_TRACE_ITER,
tools/testing/selftests/bpf/verifier/sleepable.c:61:	.expected_attach_type = BPF_LSM_MAC,
tools/testing/selftests/bpf/verifier/sleepable.c:85:	.expected_attach_type = BPF_TRACE_RAW_TP,
tools/testing/selftests/bpf/verifier/wide_access.c:12:	.expected_attach_type = BPF_CGROUP_UDP6_SENDMSG, \
tools/testing/selftests/bpf/verifier/wide_access.c:54:	.expected_attach_type = BPF_CGROUP_UDP6_SENDMSG, \
tools/testing/selftests/bpf/veristat.c:982:				       enum bpf_attach_type *attach_type)
tools/testing/selftests/bpf/veristat.c:996:		enum bpf_attach_type attach_type;
tools/testing/selftests/bpf/veristat.c:1027:			*attach_type = ctx_map[i].attach_type;
tools/testing/selftests/bpf/veristat.c:1065:		enum bpf_attach_type attach_type;
tools/testing/selftests/bpf/veristat.c:1093:		if (guess_prog_type_by_ctx_name(ctx_name, &prog_type, &attach_type) == 0) {
tools/testing/selftests/bpf/veristat.c:1095:			bpf_program__set_expected_attach_type(prog, attach_type);
